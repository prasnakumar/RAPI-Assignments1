Overview:
HTTP/3 is the latest version of the HTTP protocol, finalized in 2022. It is built on the QUIC (Quick UDP Internet Connections) transport protocol, a major departure from the TCP (Transmission Control Protocol) that underpins HTTP/1.1 and HTTP/2. HTTP/3 aims to address latency and performance issues associated with older versions by leveraging QUIC’s features.

Key Features of HTTP/3:
* Built on QUIC (Quick UDP Internet Connections): Unlike HTTP/1.x and HTTP/2, which use TCP (Transmission Control Protocol), HTTP/3 uses QUIC, a protocol based on UDP (User Datagram Protocol). QUIC allows faster connection setups, reduces latency, and improves multiplexing.

* Faster Connection Establishment: QUIC eliminates the need for the traditional TCP handshake. It enables 0-RTT (Zero Round Trip Time) connection establishment, meaning that once a client and server have communicated before, they can reuse the previous connection without needing to perform a full handshake again.

* Improved Multiplexing: HTTP/3 continues HTTP/2’s multiplexing feature but over QUIC, which ensures that independent streams of data can flow concurrently without blocking each other, avoiding head-of-line blocking entirely.

* Encryption by Default: QUIC is designed to be fully encrypted, which means that all HTTP/3 traffic is secure, eliminating the need for separate SSL/TLS negotiation as in HTTP/1.x and HTTP/2.

* Resilience in Mobile Networks: QUIC handles network changes more efficiently, making it well-suited for mobile and cellular networks, where connections may drop or change frequently. This improves overall user experience on mobile devices.


  Limitations of HTTP/3:
1. Early Adoption: HTTP/3 is still in the adoption phase. Not all browsers, servers, or networks support it yet. However, support is rapidly increasing, and major web browsers (like Chrome and Firefox) already support HTTP/3.

2. Compatibility: Since HTTP/3 uses QUIC, which relies on UDP, some firewalls and networks that block UDP traffic may cause issues for users trying to access HTTP/3 websites.


C# 3.0 
using System;
using System.Net.Http;
using System.Threading.Tasks;

class HttpRequest
{
    static async Task Main()
    {
        // You'd typically use a newer HttpClient or configure one to use HTTP/3 when available.
        var handler = new HttpClientHandler
        {
            // Enable HTTP/3 support (Note: Actual HTTP/3 support requires .NET 6 or later and a supporting server)
            AutomaticDecompression = System.Net.DecompressionMethods.GZip | System.Net.DecompressionMethods.Deflate
        };

        using (var client = new HttpClient(handler))
        {
            // Set the target URL, which should support HTTP/3
            string url = "https://example.com/my-page.html";  // Ensure the server supports HTTP/3

            try
            {
                // Send the HTTP/3 GET request
                var response = await client.GetAsync(url);

                // Check if the response is successful
                if (response.IsSuccessStatusCode)
                {
                    // Read and display the response content
                    string content = await response.Content.ReadAsStringAsync();
                    Console.WriteLine("Response from server:");
                    Console.WriteLine(content);
                }
                else
                {
                    Console.WriteLine($"Error: {response.StatusCode}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Exception: {ex.Message}");
            }
        }
    }
}



